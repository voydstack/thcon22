#ifndef DNS_H
#define DNS_H

#include <stdio.h>
#include <sys/types.h>
#include <netinet/in.h>

#include "utils.h"

#define BUFFER_SIZE 1024
#define TYPE_TXT 0x10
#define TYPE_A 0x1

struct dns_header {
    unsigned short id; // identification number

    unsigned char rd :1; // recursion desired
    unsigned char tc :1; // truncated message
    unsigned char aa :1; // authoritive answer
    unsigned char opcode :4; // purpose of message
    unsigned char qr :1; // query/response flag

    unsigned char rcode :4; // response code
    unsigned char cd :1; // checking disabled
    unsigned char ad :1; // authenticated data
    unsigned char z :1; // its z! reserved
    unsigned char ra :1; // recursion available

    unsigned short q_count; // number of question entries
    unsigned short ans_count; // number of answer entries
    unsigned short auth_count; // number of authority entries
    unsigned short add_count; // number of resource entries
};

struct dns_packet {
    struct sockaddr_in *client;
    socklen_t client_len;
    size_t size;
    struct dns_header header;
    char data[BUFFER_SIZE - sizeof (struct dns_header)];
};

struct dns_question {
    unsigned short type;
    unsigned short class;
    size_t real_size;
    size_t domains_count;
    struct domain_list *domains;
};

struct __attribute__((__packed__)) dns_answer {
    unsigned short magic;
    unsigned short type;
    unsigned short class;
    unsigned int ttl;
    unsigned short size;
};

void parse_header (struct dns_header *header);

void prepare_header (struct dns_header *header);

struct dns_question *parse_request (struct dns_packet *pkt);

struct dns_packet *resolve_query(struct dns_packet *pkt, struct dns_question *question, char *data, unsigned short size);

#endif